package fssi
package interpreter

import ast._
import types.base._
import types.biz._
import utils._

class AccountServiceHandler extends AccountService.Handler[Stack] {

  /** create account private key and public key
    * secp256k1 curve is compatible with bitcoin account
    */
  override def createSecp256k1KeyPair(): Stack[(Account.PubKey, Account.PrivKey)] = Stack {
    val kp        = crypto.generateECKeyPair(crypto.SECP256K1)
    val pkBytes   = crypto.getECPublicKey(kp)
    val privBytes = crypto.getECPrivateKey(kp)
    (Account.PubKey(pkBytes), Account.PrivKey(privBytes))
  }

  /** create a secret key to encrypt the account's private key.
    * we use the AES standard
    */
  override def createAesSecretKey(seed: RandomSeed): Stack[Account.SecretKey] = Stack {
    Account.SecretKey(crypto.createAesSecretKey(seed.value).getEncoded)
  }

  /** create aes encryption iv(16bytes)
    */
  override def createAesIV(): Stack[Account.IV] = Stack {
    Account.IV(crypto.randomBytes(16))
  }

  /** encrypt a private key by using AES standard
    */
  override def aesEncryptPrivKey(privKey: Account.PrivKey,
                                 secretKey: Account.SecretKey,
                                 iv: Account.IV): Stack[Account.PrivKey] = Stack {
    Account.PrivKey(crypto.aesEncryptPrivKey(iv.value, privKey.value, secretKey.value))
  }

  /** according btc standard, the id/address is from account's public key.
    * the payload of id/address is the generated by double-hash the pub key.
    * @see https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch04.asciidoc#pubkey_to_address
    */
  override def doubleHash(pubKey: Account.PubKey): Stack[Hash] = Stack {
    // A = RIPEMD160(SHA256(K))
    import crypto._
    Hash(ripemd160(sha256(pubKey.value)))
  }

  /** wrapping the payload(double hash) to an account's id/address
    * @see https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch04.asciidoc#pubkey_to_address
    */
  override def base58checkWrapperForAccountId(payload: Hash): Stack[Base58Check] = Stack {
    // version for account id is 0x00
    Base58Check(0, payload.value).resetChecksum
  }
}

object AccountServiceHandler {
  val instance = {
    crypto.registerBC()
    new AccountServiceHandler
  }

  trait Implicits {
    implicit val accountServiceHandler: AccountServiceHandler = instance
  }
}
