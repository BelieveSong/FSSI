package fssi
package interpreter

import types.biz._
import types.base._
import types.exception._
import ast._

import scala.util._
import java.io._
import better.files.{File => ScalaFile, _}

import io.circe._
import io.circe.parser._
import jsonCodecs._

class AccountStoreHandler extends AccountStore.Handler[Stack] {

  /** Load an account from a json file
    * @param accountFile json file, which was generated by `CreateAccount
    */
  override def loadAccountFromFile(accountFile: File): Stack[Either[FSSIException, Account]] =
    Stack {
      val x = for {
        json    <- parse(accountFile.toScala.contentAsString)
        account <- json.as[Account]
      } yield account

      x.left.map(e => new FSSIException(e.getMessage))
    }

  /** load secret key file from a file
    */
  override def loadAccountSecretKeyFile(
      secretKeyFile: File): Stack[Either[FSSIException, Account.SecretKey]] = Stack {
    val s = secretKeyFile.toScala.contentAsString
    scala.util
      .Try {
        BytesValue.decodeBcBase58[Any](s).map(_.bytes).map(Account.SecretKey).get
      }
      .toEither
      .left
      .map(x => new FSSIException(x.getMessage))

  }

  /** Load an account from a json file
    * @param accountFile json file, which was generated by `CreateAccount
    */
  /*
  override def loadAccountFromFile(accountFile: File): Stack[Either[FSSIException, Account]] =
    Stack { setting =>
      Try {
        val accountString = accountFile.toScala.contentAsString
        val result = for {
          json    <- parse(accountString)
          account <- json.as[Account]
        } yield account

        result.right.get

      }.toEither.left.map(x =>
        new FSSIException(s"load account from file($accountFile) failed", Some(x)))
    }
 */
}

object AccountStoreHandler {
  private val instance = new AccountStoreHandler

  trait Implicits {
    implicit val accountStoreHandler: AccountStoreHandler = instance
  }
}
